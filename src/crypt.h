/*
 * crypt.h
 *
 * Copyright 2011-2012 Thomas L Dunnick
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
#ifndef __CRYPT__
#define __CRYPT__
#include <openssl/pem.h>
#include <openssl/des.h>
#include <openssl/pkcs12.h>

/*
 * supported ciphers
 */
#define TRIPLEDES 1
#define AES128 2
#define AES192 3
#define AES256 4
#define FIRSTCIPHER TRIPLEDES
#define LASTCIPHER AES256

#define DNSZ 1024	/* size of a distinguish name (subject)	*/
#define SKEYSZ 32	/* size of a symetric key		*/
#define PKEYSZ 512	/* size of up to 4096 bit RSA key	*/

/*
 * Get a distinguished name from an X509 subject.
 *
 * cert X509 certificate
 * dn buffer for name
 * len buffer size
 * return pointer to the dn
 */
char *crypt_X509_dn (X509 *cert, char *dn, int len);

/*
 * Get a certificate at location unc.  
 *
 * unc path to certificate
 * passwd password to read if needed
 * return X509 certificate or NULL if fails
 *
 */
X509 *crypt_get_X509 (char *unc, char *passwd);

/*
 * Get the private at the location specified.
 *
 * name name of the certificate file
 * passwd needed to decrypt if necessary
 * return the private key.
 *
 * Trys PEM, DER, and finally PKCS12 formats coded certificates.
 */
EVP_PKEY *crypt_get_pkey (char *name, char *passwd);

/*
 * Asymetric encryption using PEM X509 certificate public key.
 *
 * cert X509 certificate with public key
 * enc buffer for encrypted data
 * plain buffer for plain data
 * len of plain data
 *
 * Return the encrypted length.
 */
int crypt_X509_encrypt (X509 *cert, char *enc, char *plain, int len);

/*
 * Public key encryption from a certificate location.  The certificate
 *
 * unc location of certificate
 * passwd password used to access certificate if encrypted
 * dn DNSZ buffer for distinguished name found on the certificate
 * enc buffer for encrypted data
 * plain buffer for plain data
 * len length of plain data
 * returns length of encrypted data.
 */
int crypt_pk_encrypt (char *unc, char *passwd, char *dn,
  char *enc, char *plain, int len);

/*
 * Asymetric private key decryption using a key file.  
 *
 * keyname name of private key file
 * passwd password for private key file
 * plain buffer for decrypted data
 * enc buffer for encrypted data
 * returns length of plain data
 */
int crypt_pk_decrypt (char *keyname, char *passwd, char *plain, char *enc);

/*
 * returns EVP encryption cipher
 * how one of the encryption algorithms in crypt.h
 */
const EVP_CIPHER *crypt_cipher (int how);

/* 
 * returns size of encryption key
 * how one of the encryption algorithms in crypt.h
 */
int crypt_keylen (int how);

/*
 * returns size of encryption block
 * how one of the encryption algorithms in crypt.h
 */
int crypt_blocksz (int how);

/*
 * generate an initial vector
 * iv is vector destination
 * how one of the encryption algorithms in crypt.h
 * return vector size
 */
int crypt_iv (unsigned char *iv, int how);

/*
 * generate a cyptographic key and optional vector
 *
 * key 32 byte buffer for encryption key 
 * how one of the encryption algorithms in crypt.h
 * returns key length
 */
int crypt_key (unsigned char *key, int how);

/*
 * read binary or base 64 encoded symetric key from a file
 *
 * key 32 byte buffer for encryption key 
 * unc path to file
 * return it's length or 0 if not valid key
 */
int crypt_fkey (unsigned char *key, char *unc);

/*
 * generate a password based key for encryption use
 *
 * key generated key
 * pw password
 * salt 8 byte buffer for perturbing the key - may be NULL
 * how one of the encryption algorithms in crypt.h
 * returns key length
 */
int crypt_pbkey (unsigned char *key, char *pw, char *salt, int how);

/*
 * general purpose EVP based crypto function
 *
 * dst destination data (may be same a src)
 * src source data
 * key encryption key
 * len source data length
 * how one of the encryption algorithms in crypt.h
 * encrypt encrypts when true, decrypts when false
 * returns length of dst buffer
 */

int crypt_copy (unsigned char *dst, unsigned char *src,
    unsigned char *key, int len, int how, int encrypt);
/*
 * general purpose EVP based encryption
 *
 * enc encrypted data (may be same a plain)
 * plain data to be encrypted
 * key encryption key generated by call
 * len source data length
 * how one of the encryption algorithms in crypt.h
 * returns length of dst buffer
 */
int crypt_encrypt (unsigned char *enc, unsigned char *plain,
    unsigned char *key, int len, int how);

/*
 * general purpose EVP based decryption
 *
 * plain decrypted data (may be same a enc)
 * enc encrypted data
 * key encryption key
 * len source data length
 * how one of the encryption algorithms in crypt.h
 * returns length of decrypted data
 */
int crypt_decrypt (unsigned char *plain, unsigned char *enc,
    unsigned char *key, int len, int how);

#endif /* __CRYPT__ */
